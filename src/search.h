#ifndef SEARCH_H
#define SEARCH_H

#include "board.h"
#include <vector>
#include "movegenerator.h"
#include <iostream>

class Search {
    public:
    
        Move searchAlphaBeta(Board board,int depth);
        int negaMax(Board board, int alpha, int, int depthLeft);
        int evaluate(Board &board);
        int getPieceSquareScore(Board &board);
        int getScoreForSpecificPiece(Board &board,Board::BitBoardEnum piece);
        int getMaterialScore(Board &board);

        //{White,R,N,B,Q,K,P,Black,r,n,b,q,k,p,All};
        inline static const std::array<std::array<int,64>,12> pieceSquareScoreArray = {{
            // White Rook
            {0,0,0,0,0,0,0,0,
            5,10,10,10,10,10,10,5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            0,0,0,5,5,0,0,0 },
            // White Knight
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // White Bishop
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // White Queen
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // White King
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // White Pawn
            {0,0,0,0,0,0,0,0,
            50,50,50,50,50,50,50,0,
            10,10,20,30,30,20,10,10,
            5,5,10,25,25,10,5,5,
            0,0,0,20,20,0,0,0,
            0 ,-5,-10,0,0,-10,-5,5,
            5,10,10,-20,-20,10,10,5,
            0,0,0,0,0,0,0,0, },
            // Black Rook
            {0,0,0,5,5,0,0,0,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            5,10,10,10,10,10,10,5,
            0,0,0,0,0,0,0,0 },
            // Black Knight
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // Black Bishop
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // Black Queen
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // Black King
            {-5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5,
            -5,0,0,0,0,0,0,-5, },
            // Black Pawn
            {0,0,0,0,0,0,0,0,
            5,10,10,-20,-20,10,10,5,
            0 ,-5,-10,0,0,-10,-5,5,
            0,0,0,20,20,0,0,0,            
            5,5,10,25,25,10,5,5,
            10,10,20,30,30,20,10,10,
            50,50,50,50,50,50,50,0,
            0,0,0,0,0,0,0,0, }}};
        
};
#endif